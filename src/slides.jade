section
    h1 Go Programming Language
    h3 Introduction

section
    img(src="src/images/logo.png")
    br
    a(href="https://blog.golang.org/gopher") https://blog.golang.org/gopher

section
    style.
        #modules {
            max-height: 60vh;
            height: 60vh;
        }
    img#modules(src="src/images/modules.png")

section
    h2 Go (Golang)
    ul
        li open source programming language
        li created at Google (2007, Robert Griesemer, Rob Pike, and Ken Thompson)
        li compiled, statically typed
        li garbage collection, structural typing
        li CSP-style<sup>*</sup> concurrent programming features
    br
    br
    small.float-left * communicating sequential processes

section
    h2 Naming dispute
    a(href="https://en.wikipedia.org/wiki/Go_(programming_language)#Naming_dispute") Go &nbsp;
    | vs &nbsp;
    a(href="https://en.wikipedia.org/wiki/Go!_(programming_language)") Go!

section
    h2 Hello World
    pre
        code.hljs.golang.
            package main

            import "fmt"

            func main() {
                fmt.Println("Hello, World")
            }

section
    h2 Tooling
    ul
        li go get - simple package manager
        li go test
        li go build
        li go clean
        li go run
        li gofmt - formatter
        li golint - linter
        li godoc - documentation
        li go vet - static analyzer

section
    h2 Pros & Sugar
    ul
        li fast compilation time
        li garbage collection
        li initialization through type inference (x := 0 not int x = 0;)
        li built-in concurrency primitives: light-weight processes (goroutines), channels, and the select statement
        li multiple return values, (result, err) pair as convention

section
    h2 Cons*
    ul
        li lack of mature libraries
        li no compile-time generics (code duplication)
        li no language extensibility (like operator overloading)
        li overhead of garbage collection
        li no inheritance
        li no assertions
        li no pointer arithmetic
        li no implicit type conversions (by compiler)

section
    h2 Companies using
    br
    .split
        .left
            ul
                li Docker
                li Ethereum
                li Google
                li Dropbox
                li CloudFlare
                li SoundCloud
        .right
            ul
                li Cloud Foundry
                li CoreOS
                li Couchbase
                li MongoDB
                li Uber
    br
    br
    small @source: &nbsp;
        a(href="https://en.wikipedia.org/wiki/Go_(programming_language)") https://en.wikipedia.org/wiki/Go_(programming_language)

section
    h2 Types
    br
    .split
        .left
            ul
                li byte, int64, float32, etc.
                li boolean
                li string (immutable)
                li arrays
                li hash tables
        .right
            ul
                li channels
                li pointers
                li  custom types (struct)
                    pre
                        code.hljs.golang.
                            type Circle struct {
                                radius float64
                            }

                            type ipv4addr uint32

section
    h2 Functions
    pre
        code.hljs.golang.
            func addFactory(valueToAdd int) int {
                return func(value) {
                    fmt.Println("%d + %d  = %d", value, valueToAdd, value + valueToAdd)
                    return value + valueToAdd
                }
            }

section
    h2 Interfaces
    .split
        .left
            pre
                code.hljs.golang.
                    type geometry interface {
                        area() float64
                    }

                    type rect struct {
                        width, height float64
                    }

                    type circle struct {
                        radius float64
                    }

                    func (r rect) area() float64 {
                        return r.width * r.height
                    }

                    func (c circle) area() float64 {
                        return math.Pi * c.radius * c.radius
                    }
        .right
            pre
                code.hljs.golang.
                    func measure(g geometry) {
                        fmt.Println(g.area())
                    }

                    func main() {
                        r := rect{width: 3, height: 4}
                        c := circle{radius: 5}
                        measure(r)
                        measure(c)
                    }










section
    h2 Composition
    pre
        code.hljs.golang.
            type Person struct {
                name string
                age  int
            }

            func (p Person ) hello() {
                fmt.Printf("Hi, I am %s. I am %d.\n", p.name, p.age)
            }

            type PersonWithPhone struct {
                Person
                number int
            }

            func main() {
                a := Person{name: "Alice", age: 12}
                a.hello()

                b := PersonWithPhone{Person{"Bob", 15}, 123456}
                b.age += 10
                b.hello()
            }

section
    h2 Concurrency: goroutines
    ul
        li primary concurrency construct, a type of light-weight process
        li language specification does not specify how goroutines should be implemented
        li like threads, but cheaper (smaller stacks)
        li current implementations: multiplex goroutines onto a smaller set of operating system threads

section
    h2 Concurrency: channels
    pre
        code.hljs.golang.
            func fibonacci(c, quit chan int) {
                x, y := 0, 1
                for {
                    select {
                    case c <- x:
                        x, y = y, x+y
                    case <-quit:
                        fmt.Println("quit")
                        return
                    }
                }
            }

            func main() {
                c := make(chan int)
                quit := make(chan int)
                go func() {
                    for i := 0; i < 10; i++ {
                        fmt.Println(<-c)
                    }
                    quit <- 0
                }()
                fibonacci(c, quit)
            }
    small @source:&nbsp;
        a(href="https://tour.golang.org/concurrency/6") https://tour.golang.org/concurrency/6

section
    h2 Defer
    pre
        code.hljs.golang.
            func CopyFile(dstName, srcName string) (written int64, err error) {
                src, err := os.Open(srcName)
                if err != nil {
                    return
                }

                defer src.Close()
                dst, err := os.Create(dstName)
                if err != nil {
                    return
                }

                defer dst.Close()
                return io.Copy(dst, src)
            }
    small @source:&nbsp;
        a(href="https://blog.golang.org/defer-panic-and-recover") https://blog.golang.org/defer-panic-and-recover

section
    h2 Defer
    pre
        code.hljs.golang.
            func a() {
                i := 0
                defer fmt.Println(i)
                i++
                return
            } // 0
    pre
        code.hljs.golang.
            func b() {
                for i := 0; i < 4; i++ {
                    defer fmt.Print(i)
                }
            } // "3210":
    pre
        code.hljs.golang.
            func c() (i int) {
                defer func() {
                    i++
                }()
                return 1
            } // 2
    small @source:&nbsp;
        a(href="https://blog.golang.org/defer-panic-and-recover") https://blog.golang.org/defer-panic-and-recover

section
    h2 Panic & recover
    .split
        pre.left
            code.hljs.golang.
                func main() {
                    f()
                    fmt.Println("Returned normally from f.")
                }

                func f() {
                    defer func() {
                        if r := recover(); r != nil {
                            fmt.Println("Recovered in f", r)
                        }
                    }()
                    fmt.Println("Calling g.")
                    g(0)
                    fmt.Println("Returned normally from g.")
                }

                func g(i int) {
                    if i > 3 {
                        fmt.Println("Panicking!")
                        panic(fmt.Sprintf("%v", i))
                    }
                    defer fmt.Println("Defer in g", i)
                    fmt.Println("Printing in g", i)
                    g(i + 1)
                }
        pre.right
            code.hljs.golang.
                Calling g.
                Printing in g 0
                Printing in g 1
                Printing in g 2
                Printing in g 3
                Panicking!
                Defer in g 3
                Defer in g 2
                Defer in g 1
                Defer in g 0
                Recovered in f 4
                Returned normally from f.














    small @source:&nbsp;
        a(href="https://blog.golang.org/defer-panic-and-recover") https://blog.golang.org/defer-panic-and-recover

section
    h2 Packages
    ul
        li each package has a path ("compress/bzip2",  "golang.org/x/net/html") and a name (e.g., bzip2 or html)
        li references to other packages' must always be prefixed with the other package's name
        li package exposes only the capitalized names (io.Reader is public, bzip2.reader is not)
        li package paths often look like partial GitHub urls for compatibility (github.com/gorilla/mux)

section
    h2 Project structure
    pre
        code.hljs.
            export GOPATH=$HOME/work
            export PATH=$PATH:$GOPATH/bin

            bin/
                hello                           # command executable
            pkg/
                linux_amd64/
                    github.com/golang/example/
                        stringutil.a            # package object
            src/
                    github.com/golang/example/
                        .git/                   # repository metadata
                        hello/
                            hello.go            # command source
                        stringutil/
                            reverse.go          # package source
                            reverse_test.go     # test source

section
    h2 Go package management
    br
    ol
        li Repeatable builds
        li Isolated environments
        li Community consensus
    br
    br
    a(href="https://github.com/golang/go/wiki/PackageManagementTools") https://github.com/golang/go/wiki/PackageManagementTools
    br
    a(href="http://jbeckwith.com/2015/05/29/dependency-management-go/") http://jbeckwith.com/2015/05/29/dependency-management-go/

section
    h2 Testing
    pre
        code.hljs.golang.
            func TestTimeConsuming(t *testing.T) {
                if testing.Short() {
                    t.Skip("skipping test in short mode.")
                }
                //
                t.Fail()
                //
                t.Error("I'm in a bad mood.")
            }

section
    h2 Live demo
    br
    a(href="https://github.com/docker/docker") https://github.com/docker/docker

section
    h2 This is all for now...

section
    h2 Thanks!













